{"version":3,"sources":["server.js"],"names":["express","require","sqlite3","verbose","app","port","db","Database","err","console","error","message","run","use","json","post","req","res","get","row","count","listen","log"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBE,OAAnB,EAAhB;;AACA,IAAMC,GAAG,GAAGJ,OAAO,EAAnB;AACA,IAAMK,IAAI,GAAG,IAAb,C,CAEA;;AACA,IAAMC,EAAE,GAAG,IAAIJ,OAAO,CAACK,QAAZ,CAAqB,UAArB,EAAiC,UAACC,GAAD,EAAS;AACjD,MAAIA,GAAJ,EAAS;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH,GAFD,MAEO;AACHL,IAAAA,EAAE,CAACM,GAAH,CAAO,0CAAP,EAAmD,UAACJ,GAAD,EAAS;AACxD,UAAIA,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH,OAFD,MAEO;AACHL,QAAAA,EAAE,CAACM,GAAH,CAAO,4CAAP;AACH;AACJ,KAND;AAOH;AACJ,CAZU,CAAX;AAcAR,GAAG,CAACS,GAAJ,CAAQb,OAAO,UAAP,CAAe,QAAf,CAAR;AACAI,GAAG,CAACS,GAAJ,CAAQb,OAAO,CAACc,IAAR,EAAR;AAEAV,GAAG,CAACW,IAAJ,CAAS,YAAT,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCX,EAAAA,EAAE,CAACM,GAAH,CAAO,0CAAP,EAAmD,UAASJ,GAAT,EAAc;AAC7D,QAAIA,GAAJ,EAAS;AACL,aAAOC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB,CAAP;AACH;;AACDL,IAAAA,EAAE,CAACY,GAAH,CAAO,+BAAP,EAAwC,UAACV,GAAD,EAAMW,GAAN,EAAc;AAClD,UAAIX,GAAJ,EAAS;AACL,eAAOC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB,CAAP;AACH;;AACDM,MAAAA,GAAG,CAACH,IAAJ,CAAS;AAAEM,QAAAA,KAAK,EAAED,GAAG,CAACC;AAAb,OAAT;AACH,KALD;AAMH,GAVD;AAWH,CAZD;AAcAhB,GAAG,CAACc,GAAJ,CAAQ,QAAR,EAAkB,UAACF,GAAD,EAAMC,GAAN,EAAc;AAC5BX,EAAAA,EAAE,CAACY,GAAH,CAAO,+BAAP,EAAwC,UAACV,GAAD,EAAMW,GAAN,EAAc;AAClD,QAAIX,GAAJ,EAAS;AACL,aAAOC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB,CAAP;AACH;;AACDM,IAAAA,GAAG,CAACH,IAAJ,CAAS;AAAEM,MAAAA,KAAK,EAAED,GAAG,CAACC;AAAb,KAAT;AACH,GALD;AAMH,CAPD;AASAhB,GAAG,CAACiB,MAAJ,CAAWhB,IAAX,EAAiB,YAAM;AACnBI,EAAAA,OAAO,CAACa,GAAR,+CAAoCjB,IAApC;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst app = express();\r\nconst port = 3000;\r\n\r\n// SQLite 데이터베이스 연결\r\nconst db = new sqlite3.Database(':memory:', (err) => {\r\n    if (err) {\r\n        console.error(err.message);\r\n    } else {\r\n        db.run('CREATE TABLE click_count (count INTEGER)', (err) => {\r\n            if (err) {\r\n                console.error(err.message);\r\n            } else {\r\n                db.run('INSERT INTO click_count (count) VALUES (0)');\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\napp.post('/increment', (req, res) => {\r\n    db.run('UPDATE click_count SET count = count + 1', function(err) {\r\n        if (err) {\r\n            return console.error(err.message);\r\n        }\r\n        db.get('SELECT count FROM click_count', (err, row) => {\r\n            if (err) {\r\n                return console.error(err.message);\r\n            }\r\n            res.json({ count: row.count });\r\n        });\r\n    });\r\n});\r\n\r\napp.get('/count', (req, res) => {\r\n    db.get('SELECT count FROM click_count', (err, row) => {\r\n        if (err) {\r\n            return console.error(err.message);\r\n        }\r\n        res.json({ count: row.count });\r\n    });\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`서버가 http://localhost:${port}에서 실행 중입니다.`);\r\n});\r\n"],"file":"server.dev.js"}